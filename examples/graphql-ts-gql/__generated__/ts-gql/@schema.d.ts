// ts-gql-integrity:bb8a4ca84dd36f47b6dc69ba41cd3457
/*
ts-gql-meta-begin
{
  "hash": "62c4cdd8f5c30d120d6f27f38e53f9a4"
}
ts-gql-meta-end
*/
/** @deprecated This should not be used outside of code generated by ts-gql */
export type Maybe<T> = T | null;
/** @deprecated This should not be used outside of code generated by ts-gql */
export type InputMaybe<T> = Maybe<T>;
/** @deprecated This should not be used outside of code generated by ts-gql */
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
/** @deprecated This should not be used outside of code generated by ts-gql */
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
/** @deprecated This should not be used outside of code generated by ts-gql */
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };

/** @deprecated This should not be used outside of code generated by ts-gql */
export type Scalars = {
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
  DateTime: DateTime;
  JSON: JSON;
};

export type Post = {
  readonly __typename: "Post";
  readonly id: string;
  readonly title: string | null;
  readonly publishDate: DateTime | null;
  readonly author: Author | null;
};

export type DateTime = any;

export type PostWhereUniqueInput = {
  readonly id?: string | null;
};

export type PostWhereInput = {
  readonly AND?: TSGQLMaybeArray<PostWhereInput> | null;
  readonly OR?: TSGQLMaybeArray<PostWhereInput> | null;
  readonly NOT?: TSGQLMaybeArray<PostWhereInput> | null;
  readonly id?: IDFilter | null;
  readonly title?: StringFilter | null;
  readonly publishDate?: DateTimeFilter | null;
  readonly author?: AuthorWhereInput | null;
};

export type IDFilter = {
  readonly equals?: string | null;
  readonly in?: TSGQLMaybeArray<string> | null;
  readonly notIn?: TSGQLMaybeArray<string> | null;
  readonly lt?: string | null;
  readonly lte?: string | null;
  readonly gt?: string | null;
  readonly gte?: string | null;
  readonly not?: IDFilter | null;
};

export type StringFilter = {
  readonly equals?: string | null;
  readonly in?: TSGQLMaybeArray<string> | null;
  readonly notIn?: TSGQLMaybeArray<string> | null;
  readonly lt?: string | null;
  readonly lte?: string | null;
  readonly gt?: string | null;
  readonly gte?: string | null;
  readonly contains?: string | null;
  readonly startsWith?: string | null;
  readonly endsWith?: string | null;
  readonly not?: NestedStringFilter | null;
};

export type NestedStringFilter = {
  readonly equals?: string | null;
  readonly in?: TSGQLMaybeArray<string> | null;
  readonly notIn?: TSGQLMaybeArray<string> | null;
  readonly lt?: string | null;
  readonly lte?: string | null;
  readonly gt?: string | null;
  readonly gte?: string | null;
  readonly contains?: string | null;
  readonly startsWith?: string | null;
  readonly endsWith?: string | null;
  readonly not?: NestedStringFilter | null;
};

export type DateTimeFilter = {
  readonly equals?: DateTime | null;
  readonly in?: TSGQLMaybeArray<DateTime> | null;
  readonly notIn?: TSGQLMaybeArray<DateTime> | null;
  readonly lt?: DateTime | null;
  readonly lte?: DateTime | null;
  readonly gt?: DateTime | null;
  readonly gte?: DateTime | null;
  readonly not?: DateTimeFilter | null;
};

export type PostOrderByInput = {
  readonly id?: OrderDirection | null;
  readonly title?: OrderDirection | null;
  readonly publishDate?: OrderDirection | null;
};

export type OrderDirection =
  | "asc"
  | "desc";

export type PostUpdateInput = {
  readonly title?: string | null;
  readonly publishDate?: DateTime | null;
  readonly author?: AuthorRelateToOneForUpdateInput | null;
};

export type AuthorRelateToOneForUpdateInput = {
  readonly create?: AuthorCreateInput | null;
  readonly connect?: AuthorWhereUniqueInput | null;
  readonly disconnect?: boolean | null;
};

export type PostUpdateArgs = {
  readonly where: PostWhereUniqueInput;
  readonly data: PostUpdateInput;
};

export type PostCreateInput = {
  readonly title?: string | null;
  readonly publishDate?: DateTime | null;
  readonly author?: AuthorRelateToOneForCreateInput | null;
};

export type AuthorRelateToOneForCreateInput = {
  readonly create?: AuthorCreateInput | null;
  readonly connect?: AuthorWhereUniqueInput | null;
};

export type Author = {
  readonly __typename: "Author";
  readonly id: string;
  readonly name: string | null;
  readonly posts: ReadonlyArray<Post> | null;
  readonly postsCount: number | null;
  readonly latestPost: Post | null;
};

export type AuthorpostsArgs = {
  readonly where?: PostWhereInput;
  readonly orderBy?: TSGQLMaybeArray<PostOrderByInput>;
  readonly take?: number | null;
  readonly skip?: number;
  readonly cursor?: PostWhereUniqueInput | null;
};

export type AuthorpostsCountArgs = {
  readonly where?: PostWhereInput;
};

export type AuthorWhereUniqueInput = {
  readonly id?: string | null;
};

export type AuthorWhereInput = {
  readonly AND?: TSGQLMaybeArray<AuthorWhereInput> | null;
  readonly OR?: TSGQLMaybeArray<AuthorWhereInput> | null;
  readonly NOT?: TSGQLMaybeArray<AuthorWhereInput> | null;
  readonly id?: IDFilter | null;
  readonly name?: StringFilter | null;
  readonly posts?: PostManyRelationFilter | null;
};

export type PostManyRelationFilter = {
  readonly every?: PostWhereInput | null;
  readonly some?: PostWhereInput | null;
  readonly none?: PostWhereInput | null;
};

export type AuthorOrderByInput = {
  readonly id?: OrderDirection | null;
  readonly name?: OrderDirection | null;
};

export type AuthorUpdateInput = {
  readonly name?: string | null;
  readonly posts?: PostRelateToManyForUpdateInput | null;
};

export type PostRelateToManyForUpdateInput = {
  readonly disconnect?: TSGQLMaybeArray<PostWhereUniqueInput> | null;
  readonly set?: TSGQLMaybeArray<PostWhereUniqueInput> | null;
  readonly create?: TSGQLMaybeArray<PostCreateInput> | null;
  readonly connect?: TSGQLMaybeArray<PostWhereUniqueInput> | null;
};

export type AuthorUpdateArgs = {
  readonly where: AuthorWhereUniqueInput;
  readonly data: AuthorUpdateInput;
};

export type AuthorCreateInput = {
  readonly name?: string | null;
  readonly posts?: PostRelateToManyForCreateInput | null;
};

export type PostRelateToManyForCreateInput = {
  readonly create?: TSGQLMaybeArray<PostCreateInput> | null;
  readonly connect?: TSGQLMaybeArray<PostWhereUniqueInput> | null;
  readonly set?: TSGQLMaybeArray<PostWhereUniqueInput> | null;
};

export type JSON = any;

export type Mutation = {
  readonly __typename: "Mutation";
  readonly createPost: Post | null;
  readonly createPosts: ReadonlyArray<Post | null> | null;
  readonly updatePost: Post | null;
  readonly updatePosts: ReadonlyArray<Post | null> | null;
  readonly deletePost: Post | null;
  readonly deletePosts: ReadonlyArray<Post | null> | null;
  readonly createAuthor: Author | null;
  readonly createAuthors: ReadonlyArray<Author | null> | null;
  readonly updateAuthor: Author | null;
  readonly updateAuthors: ReadonlyArray<Author | null> | null;
  readonly deleteAuthor: Author | null;
  readonly deleteAuthors: ReadonlyArray<Author | null> | null;
};

export type MutationcreatePostArgs = {
  readonly data: PostCreateInput;
};

export type MutationcreatePostsArgs = {
  readonly data: TSGQLMaybeArray<PostCreateInput>;
};

export type MutationupdatePostArgs = {
  readonly where: PostWhereUniqueInput;
  readonly data: PostUpdateInput;
};

export type MutationupdatePostsArgs = {
  readonly data: TSGQLMaybeArray<PostUpdateArgs>;
};

export type MutationdeletePostArgs = {
  readonly where: PostWhereUniqueInput;
};

export type MutationdeletePostsArgs = {
  readonly where: TSGQLMaybeArray<PostWhereUniqueInput>;
};

export type MutationcreateAuthorArgs = {
  readonly data: AuthorCreateInput;
};

export type MutationcreateAuthorsArgs = {
  readonly data: TSGQLMaybeArray<AuthorCreateInput>;
};

export type MutationupdateAuthorArgs = {
  readonly where: AuthorWhereUniqueInput;
  readonly data: AuthorUpdateInput;
};

export type MutationupdateAuthorsArgs = {
  readonly data: TSGQLMaybeArray<AuthorUpdateArgs>;
};

export type MutationdeleteAuthorArgs = {
  readonly where: AuthorWhereUniqueInput;
};

export type MutationdeleteAuthorsArgs = {
  readonly where: TSGQLMaybeArray<AuthorWhereUniqueInput>;
};

export type Query = {
  readonly __typename: "Query";
  readonly post: Post | null;
  readonly posts: ReadonlyArray<Post> | null;
  readonly postsCount: number | null;
  readonly author: Author | null;
  readonly authors: ReadonlyArray<Author> | null;
  readonly authorsCount: number | null;
  readonly keystone: KeystoneMeta;
};

export type QuerypostArgs = {
  readonly where: PostWhereUniqueInput;
};

export type QuerypostsArgs = {
  readonly where?: PostWhereInput;
  readonly orderBy?: TSGQLMaybeArray<PostOrderByInput>;
  readonly take?: number | null;
  readonly skip?: number;
  readonly cursor?: PostWhereUniqueInput | null;
};

export type QuerypostsCountArgs = {
  readonly where?: PostWhereInput;
};

export type QueryauthorArgs = {
  readonly where: AuthorWhereUniqueInput;
};

export type QueryauthorsArgs = {
  readonly where?: AuthorWhereInput;
  readonly orderBy?: TSGQLMaybeArray<AuthorOrderByInput>;
  readonly take?: number | null;
  readonly skip?: number;
  readonly cursor?: AuthorWhereUniqueInput | null;
};

export type QueryauthorsCountArgs = {
  readonly where?: AuthorWhereInput;
};

export type KeystoneMeta = {
  readonly __typename: "KeystoneMeta";
  readonly adminMeta: KeystoneAdminMeta;
};

export type KeystoneAdminMeta = {
  readonly __typename: "KeystoneAdminMeta";
  readonly lists: ReadonlyArray<KeystoneAdminUIListMeta>;
  readonly list: KeystoneAdminUIListMeta | null;
};

export type KeystoneAdminMetalistArgs = {
  readonly key: string;
};

export type KeystoneAdminUIListMeta = {
  readonly __typename: "KeystoneAdminUIListMeta";
  readonly key: string;
  readonly label: string;
  readonly singular: string;
  readonly plural: string;
  readonly path: string;
  readonly labelField: string;
  readonly fields: ReadonlyArray<KeystoneAdminUIFieldMeta>;
  readonly groups: ReadonlyArray<KeystoneAdminUIFieldGroupMeta>;
  readonly graphql: KeystoneAdminUIGraphQL;
  readonly pageSize: number;
  readonly initialColumns: ReadonlyArray<string>;
  readonly initialSearchFields: ReadonlyArray<string>;
  readonly initialSort: KeystoneAdminUISort | null;
  readonly initialFilter: JSON | null;
  readonly isSingleton: boolean;
  readonly hideNavigation: boolean;
  readonly hideCreate: boolean;
  readonly hideDelete: boolean;
};

export type KeystoneAdminUIFieldMeta = {
  readonly __typename: "KeystoneAdminUIFieldMeta";
  readonly key: string;
  readonly label: string;
  readonly description: string | null;
  readonly isOrderable: boolean;
  readonly isFilterable: boolean;
  readonly isNonNull: ReadonlyArray<KeystoneAdminUIFieldMetaIsNonNull> | null;
  readonly fieldMeta: JSON | null;
  readonly viewsIndex: number;
  readonly customViewsIndex: number | null;
  readonly createView: KeystoneAdminUIFieldMetaCreateView;
  readonly listView: KeystoneAdminUIFieldMetaListView;
  readonly itemView: KeystoneAdminUIFieldMetaItemView | null;
  readonly search: QueryMode | null;
};

export type KeystoneAdminUIFieldMetaitemViewArgs = {
  readonly id?: string | null;
};

export type KeystoneAdminUIFieldMetaIsNonNull =
  | "read"
  | "create"
  | "update";

export type KeystoneAdminUIFieldMetaCreateView = {
  readonly __typename: "KeystoneAdminUIFieldMetaCreateView";
  readonly fieldMode: JSON;
  readonly isRequired: JSON;
};

export type KeystoneAdminUIFieldMetaListView = {
  readonly __typename: "KeystoneAdminUIFieldMetaListView";
  readonly fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode;
};

export type KeystoneAdminUIFieldMetaListViewFieldMode =
  | "read"
  | "hidden";

export type KeystoneAdminUIFieldMetaItemView = {
  readonly __typename: "KeystoneAdminUIFieldMetaItemView";
  readonly fieldMode: JSON;
  readonly fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition;
  readonly isRequired: JSON;
};

export type KeystoneAdminUIFieldMetaItemViewFieldPosition =
  | "form"
  | "sidebar";

export type QueryMode =
  | "default"
  | "insensitive";

export type KeystoneAdminUIFieldGroupMeta = {
  readonly __typename: "KeystoneAdminUIFieldGroupMeta";
  readonly label: string;
  readonly description: string | null;
  readonly fields: ReadonlyArray<KeystoneAdminUIFieldMeta>;
};

export type KeystoneAdminUIGraphQL = {
  readonly __typename: "KeystoneAdminUIGraphQL";
  readonly names: KeystoneAdminUIGraphQLNames;
};

export type KeystoneAdminUIGraphQLNames = {
  readonly __typename: "KeystoneAdminUIGraphQLNames";
  readonly outputTypeName: string;
  readonly whereInputName: string;
  readonly whereUniqueInputName: string;
  readonly createInputName: string;
  readonly createMutationName: string;
  readonly createManyMutationName: string;
  readonly relateToOneForCreateInputName: string;
  readonly relateToManyForCreateInputName: string;
  readonly itemQueryName: string;
  readonly listOrderName: string;
  readonly listQueryCountName: string;
  readonly listQueryName: string;
  readonly updateInputName: string;
  readonly updateMutationName: string;
  readonly updateManyInputName: string;
  readonly updateManyMutationName: string;
  readonly relateToOneForUpdateInputName: string;
  readonly relateToManyForUpdateInputName: string;
  readonly deleteMutationName: string;
  readonly deleteManyMutationName: string;
};

export type KeystoneAdminUISort = {
  readonly __typename: "KeystoneAdminUISort";
  readonly field: string;
  readonly direction: KeystoneAdminUISortDirection;
};

export type KeystoneAdminUISortDirection =
  | "ASC"
  | "DESC";

type TSGQLMaybeArray<T> = ReadonlyArray<T> | T

export {};
export interface TSGQLDocuments extends Record<string, import('@ts-gql/tag').TypedDocumentNode<import('@ts-gql/tag').BaseDocumentTypes>> {}

export type TSGQLRequiredFragments<T> = (providedFragments: T) => T;